/** Processor [[main]] 

    '../examples/main.soul' modified to include all 'Processors' in 'VA::HighLevel' connected in series

    Notes:
    - Tests that all 'Processors' compile without errors
    - command: soul errors errors.soulpatch | echo
    - Only use with CLI is officially supported
*/

namespace main
{
    namespace FloatToSampleType
    {     
        VA::SampleType process (float x)
        {
            return VA::SampleType (x);
        }

        processor Processor()
        {
            input stream float in;
            output stream VA::SampleType out;
    
            void run()
            {   
                loop
                {
                    out << process (in);

                    advance();
                }
            }
        }
    }

    namespace SampleTypeToFloat
    {     
        float process (VA::SampleType x)
        {
            return float (x.sum()/VA::SampleType.size);
        }

        processor Processor()
        {
            input stream VA::SampleType in;
            output stream float out;
    
            void run()
            {   
                loop
                {
                    out << process (in);

                    advance();
                }
            }
        }
    }

    namespace va = VA::HighLevel;

    graph Processor [[main]]
    {
        input stream float in;
        output stream float out;

        input
        {
            //all input events from VA::HighLevel
            va1.stereoLinkIn va1_0;
            va1.nonlinearityIn va1_1;
            va1.volumeIn va1_2;

            va2.rateIn va2_0;
            va2.depthIn va2_1;
            va2.widthIn va2_2;
            va2.modeIn va2_3;
            va2.delayIn va2_4;
            va2.cutoffIn va2_5;
            va2.resonanceIn va2_6;
            va2.nonlinearityIn va2_7;
            va2.mixIn va2_8;
            va2.panIn va2_9;
            va2.makeupVolumeIn va2_10;

            va3.attackIn va3_0;
            va3.releaseIn va3_1;
            va3.stereoLinkIn va3_2;
            va3.thresholdIn va3_3;
            va3.ratio0In va3_4;
            va3.ratio1In va3_5;
            va3.heightIn va3_6;
            va3.widthIn va3_7;
            va3.cutoffIn va3_8;
            va3.qualityIn va3_9;
            va3.mixIn va3_10;
            va3.panIn va3_11;
            va3.makeupVolumeIn va3_12;
        }

        let
        { 
            up = FloatToSampleType::Processor;
            down = SampleTypeToFloat::Processor;

            //all 'Processors' from VA::HighLevel
            va0 = va::TheDummy::Processor;
            va1 = va::TheBass::Processor;
            va2 = va::TheChorus::Processor;
            va3 = va::TheExpressor::Processor;
            //va4 = va::TheSplit::Processor;
        }

        connection
        {       
            //all 'Processors' from VA::HighLevel connected in series
            in -> up -> va0 -> va1.in;
            va1.out -> va2.in;
            va2.out -> va3.in;
            va3.out -> down -> out; //va4.in;
            //va4.out0, va4.out1 -> down -> out;
        }
    }
}