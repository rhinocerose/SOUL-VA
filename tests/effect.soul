/** Duplicate of '../examples/main.soul' boilerplate for testEffect.m */

namespace main
{
    namespace FloatToSampleType
    {     
        VA::SampleType process (float<2> x)
        {
            return VA::SampleType (x);
        }

        processor Processor()
        {
            input stream float<2> in;
            output stream VA::SampleType out;
    
            void run()
            {   
                loop
                {
                    out << process (in);

                    advance();
                }
            }
        }
    }

    namespace SampleTypeToFloat
    {     
        float<2> process (VA::SampleType x)
        {
            return float<2>(x);
        }

        processor Processor()
        {
            input stream VA::SampleType in;
            output stream float<2> out;
    
            void run()
            {   
                loop
                {
                    out << process (in);

                    advance();
                }
            }
        }
    }

    graph Processor [[main]]
    {
        input stream float<2> in; //change streams to 'VA::SampleType' for stereo
        output stream float<2> out;

        input
        {
            // effect.depthIn;
            // effect.rateIn;
            // effect.delayIn;
            
            // effect.nonlinearityIn;
            // effect.resonanceIn;
            // effect.cutoffIn;

            // effect.mixIn;
            // effect.widthIn;
            // effect.makeupVolumeIn;

            // effect.cutoffIn;
            // effect.stereoLinkIn;
            
            // effect.attackIn;
            // effect.releaseIn;

            // effect.ratio0In;
            // effect.ratio1In;

            // effect.thresholdIn;
            // effect.colorIn;
            
            // effect.mixIn;
            // effect.makeupVolumeIn;
        }

        let
        { 
            //define effect as a 'Processor' from 'VA::HighLevel'
            effect = VA::HighLevel::TheChorus::Processor(100, 4, 180, 1, 0, 0.5f, 1, 18000, 50, -1, 0);

            //comment out for stereo
            up = FloatToSampleType::Processor;
            down = SampleTypeToFloat::Processor;
        }

        connection
        {       
            in -> up -> effect.in; //comment out 'up' and 'down' for stereo
            effect.out -> down -> out;
        }
    }
}