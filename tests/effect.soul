/** Test a 'VA::HighLevel' effect within a [[main]] processor whilst maintaining float32 input/output for CLI compatibility

    To test a different effect, modify the 'effect' namespace definition;
    It's reccommended to change the Processor defaults in VA.soul, but you may also 
    change the defaults via the Processor instance. See comments below.
*/

namespace main
{
    //'effect' namespace definition
    namespace effect = VA::HighLevel::TheSplit; 

    using inType = effect::InType;
    using inType32 = float<inType.size>;
    using outType = effect::OutType;
    using outType32 = float<outType.size>;

    namespace Decode32
    {     
        inType process (inType32 x)
        {
            inType y;

            for (int i = 0; i < inType32.size; ++i)
                y.at(i) = inType.elementType (x.at(i));
            
            return y;
        }

        processor Processor()
        {
            input stream inType32 in;
            output stream inType out;
    
            void run()
            {   
                loop
                {
                    out << process (in);

                    advance();
                }
            }
        }
    }

    namespace Encode32
    {     
        outType32 process (outType x)
        {
            outType32 y;

            for (int i = 0; i < outType.size; ++i)
                y.at(i) = outType32.elementType (x.at(i));
            
            return y;
        }

        processor Processor()
        {
            input stream outType in;
            output stream outType32 out;
    
            void run()
            {   
                loop
                {
                    out << process (in);

                    advance();
                }
            }
        }
    }

    graph Processor [[main]]
    {
        input stream inType32 in;
        output stream outType32 out;

        let
        { 
            //Processor instance
            e = effect::Processor;

            encode32 = Encode32::Processor;
            decode32 = Decode32::Processor;
        }

        connection
        {       
            in -> decode32 -> e.in;
            e.out -> encode32 -> out;
        }
    }
}