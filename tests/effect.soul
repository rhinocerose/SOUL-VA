/** Duplicate of '../examples/main.soul' boilerplate for testEffect.m */

namespace main
{
    namespace FloatToSampleType
    {     
        VA::SampleType process (float<2> x)
        {
            return VA::SampleType (x);
        }

        processor Processor()
        {
            input stream float<2> in;
            output stream VA::SampleType out;
    
            void run()
            {   
                loop
                {
                    out << process (in);

                    advance();
                }
            }
        }
    }

    namespace SampleTypeToFloat
    {     
        float<4> process (VA::SampleType.elementType<4> x)
        {
            return float<4>(x);
        }

        processor Processor()
        {
            input stream VA::SampleType.elementType<4> in;
            output stream float<4> out;
    
            void run()
            {   
                loop
                {
                    out << process (in);

                    advance();
                }
            }
        }
    }

    graph Processor [[main]]
    {
        input stream float<2> in; //change streams to 'VA::SampleType' for stereo
        output stream float<4> out;

        input
        {
            effect.frequencyIn;

            effect.thresholdIn;
            effect.releaseIn;

            effect.sustainIn;
            effect.sensitivityIn;

            effect.modeIn;
        }

        let
        { 
            //define effect as a 'Processor' from 'VA::HighLevel'
            effect = VA::HighLevel::TheSplit::Processor (1000, -10, 30, 30, 36, 1);

            //comment out for stereo
            up = FloatToSampleType::Processor;
            down = SampleTypeToFloat::Processor;
        }

        connection
        {       
            in -> up -> effect.in; //comment out 'up' and 'down' for stereo
            effect.out -> down -> out;
        }
    }
}